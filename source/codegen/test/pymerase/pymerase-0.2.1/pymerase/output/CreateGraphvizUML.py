###########################################################################
#                                                                         #
# C O P Y R I G H T   N O T I C E                                         #
#  Copyright (c) 2002 by:                                                 #
#    * California Institute of Technology                                 #
#                                                                         #
#    All Rights Reserved.                                                 #
#                                                                         #
# Permission is hereby granted, free of charge, to any person             #
# obtaining a copy of this software and associated documentation files    #
# (the "Software"), to deal in the Software without restriction,          #
# including without limitation the rights to use, copy, modify, merge,    #
# publish, distribute, sublicense, and/or sell copies of the Software,    #
# and to permit persons to whom the Software is furnished to do so,       #
# subject to the following conditions:                                    #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                   #
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS     #
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN      #
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN       #
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE        #
# SOFTWARE.                                                               #
###########################################################################
#
#       Authors: Brandon King
# Last Modified: $Date: 2006/12/18 15:54:02 $
#

"""Creates a Graphviz UML diagram of each Class/Table"""

import os
import string
import re

from pymerase.ClassMembers import getAllAttributes
from pymerase.output.dbAPI import fkeyTypes
#from pymerase.ClassMembers import getAllAssociationEnds

from pymerase.util.Warnings import DebugWarning
from pymerase.util.Warnings import InfoWarning
import warnings
from warnings import warn

############################
# Globals

TRANSLATOR_NAME='CreateGraphvizUML'
classLinks = {}

def getMultiplicityString(multi):
  if multi == fkeyTypes.OneToOne:
    return '(1..1)'
  elif multi == fkeyTypes.ManyToOne:
    return '(1..*)'
  elif multi == fkeyTypes.ManyToMany:
    return '(*..*)'
  elif multi == fkeyTypes.OneToLots:
    return '(1..LOTs)'
  else:
    return ''
  

def getAttributeString(attrib):
  text = "+%s: %s\l<ATTRIB_NAME>" % (attrib.getName(TRANSLATOR_NAME),
                                     attrib.getType().getSQLType())
  return text

def getAssocString(assoc, class2num):
  thisClassName = assoc.getClassName(TRANSLATOR_NAME)
  oppositeClassName = assoc.getOppositeEnd().getClassName(TRANSLATOR_NAME)

  if thisClassName not in classLinks[oppositeClassName]:
    text = "c%s -> c%s [taillabel=\"<TAIL_LABEL>\", label=\"\", " \
           "headlabel=\"<HEAD_LABEL>\", arrowhead=<ARROW_HEAD>, " \
           "arrowtail=<ARROW_TAIL>]" % (class2num[thisClassName],
                                        class2num[oppositeClassName])

    multiplicityLocal = assoc.getMultiplicity()
    multiplicityOther = assoc.getOppositeEnd().getMultiplicity()

    multiLocal = getMultiplicityString(multiplicityLocal)
    multiOther = getMultiplicityString(multiplicityOther)
    
    text = re.sub("<TAIL_LABEL>",
                  assoc.getName(TRANSLATOR_NAME) + ' ' + multiLocal,
                  text)
    text = re.sub("<HEAD_LABEL>",
                  assoc.getOppositeEnd().getName(TRANSLATOR_NAME) + ' ' + multiOther,
                  text)
    text = re.sub("<ARROW_TAIL>", "none", text)
    text = re.sub("<ARROW_HEAD>", "none", text)
    classLinks[thisClassName].append(oppositeClassName)
    classLinks[oppositeClassName].append(thisClassName)
    return text
  else:
    return None
  

############################
# Writer components

def write(destination, tables):
  """
  Create graphviz output in destination dirctory.
  """
  class2num = {}
  
  indent = " " * 8
  
  text = []
  text.append("#!/usr/bin/dot")
  text.append("#Generated by Pymerase (Output Module: CreateGraphvizUML)")
  text.append("#http://pymerase.sourceforge.net/")
  text.append("")
  text.append("digraph G {")
  text.append(indent + "edge [fontname=\"Helvetica\",fontsize=10," \
              "labelfontname=\"Helvetica\",labelfontsize=10];")
  text.append(indent + "node [fontname=\"Helvetica\",fontsize=10,shape=record];")

  #Create class2num dictionary
  counter = 0
  for tbl in tables:
    class2num[tbl.getName(TRANSLATOR_NAME)] = counter
    counter += 1

    #dict for keeping track of linking
    classLinks[tbl.getName(TRANSLATOR_NAME)] = []

  #reset counter
  counter = 0

  
  #Iterate through the tables/classes and process the data
  for tbl in tables:
    warn("Class(%s)-->Base(%s)" % (tbl.getName(TRANSLATOR_NAME),
                                   tbl.getBaseClassNames(TRANSLATOR_NAME)),
         DebugWarning)
    label = indent + "c%s [label=\"{<CLASS_NAME>\\n|<ATTRIB_NAME>| }\"]" % (counter)
    
    label = re.sub("<CLASS_NAME>", tbl.getName(TRANSLATOR_NAME), label)

    #Process each attribute in a given table (class)
    for attribute in getAllAttributes(tables, tbl, TRANSLATOR_NAME):
      #Insert Each Attribute
      label = re.sub("<ATTRIB_NAME>", getAttributeString(attribute), label)
    
    #REMOVE <ATTRIB_NAME> from label
    label = re.sub("<ATTRIB_NAME>", "", label)
    text.append(label)
    counter += 1

    #Association Creation
    for assocEnd in tbl.getAssociationEnds().values():
      linkage = getAssocString(assocEnd, class2num)
      if linkage is not None:
        text.append(linkage)

  #Inheritance Creation
  for tbl in tables:
    baseTable = tbl.getBaseClassNames(TRANSLATOR_NAME)
    if len(baseTable) >= 1:
      for xTbl in baseTable:
        text.append(indent + "c%s -> c%s [dir=back,arrowtail=empty, style=dashed];" % \
                    (class2num[baseTable[0]],
                     class2num[tbl.getName(TRANSLATOR_NAME)]))

  text.append("}")
  text = string.join(text, '\n')
  f = open(destination, 'w')
  f.write(text)
  f.close()
  warn("Graphviz UML Generation Complete... Good Bye.", InfoWarning)

