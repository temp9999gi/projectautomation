<HTML><HEAD><META http-equiv=Content-Type content="text/html; charset=euc-kr">
<style type="text/css">
<!--
BODY,TD,SELECT,input,DIV,form,TEXTAREA,option {font-size:9pt; font-family:verdana;color:333333}
A:link {color:#4077a0;text-decoration:none;font-weight: bold}
A:visited {color:#4077a0;text-decoration:none;font-weight: bold}
A:hover{color:#990000;text-decoration:none;font-weight: bold}
--></style></HEAD>
<BODY>
<table cellSpacing=1 cellPadding=4 width=500 bgColor=#3c62c6 border=0>
  <tr>
    <td width=600>
      <div><STRONG><FONT color=#ffffff>▶제목/참고</FONT></STRONG> </div></td></tr>
  <tr bgColor=#ffffff>
    <td>
      <div></div>
      <DIV>Title: </DIV>      
      <div>&nbsp;</div>
      <DIV>&nbsp;</DIV>
      <DIV>From: </DIV>
    </td></tr></table>
<div>&nbsp;</div>
<DIV>
<H3 id=header3>LinuxStart에서한 강좌</H3>
<P><A class=namedurl href="http://www.linuxstart.co.kr"><U><FONT 
color=#111188>리눅스스타트</FONT></U></A>에서 발췌한 부분입니다. 현재 리눅스스타트 웹 싸이트는 운영이 안 되고 있습니다. 
</P>
<H4 id=header4>정규표현식에 대해 알아 보자(1)</H4>
<P>정규표현식은 어떤 문자 패턴을 찾아서 수정 및 교환 등 웹프로그램 개발시 정교한 문자 처리를 가능하게 해준다. 그럼 정규표현식의 사용법에 
대하여 알아 보자. </P>
<P>첫번째는 기본적인 기호들에 대하여 알아 보겠다. </P>
<P>정규표현식 기본 문법 </P>
<P>'^' 와 '$' </P>
<P>'^' 는 바로 문자 뒤의 문자열로 시작됨을 가르킨다. "^The" : "The"로 시작하는 문자. ex) The Car is red, 
Theater... </P>
<P>'$' 는 문자열의 맨 마지막을 가르킨다. "of despair$" : "of despair"로 끝나는 문자열. ex) The 
concept of despair "^hello$" : hello로 시작해 hello로 끝나는 경우 이므로 "hello" 뿐이다. </P>
<P>'.', '*' 와 '+' 그리고 '?' </P>
<P>'.' 은 어떤 문자든지 임의의 한 문자를 말한다. 꼭 하나의 문자가 있어야 한다. ex) "x.z"는 xyz, xxz, xbz 등이고 
xz나 xyyz는 안된다. </P>
<P>'*' 는 바로 앞의 문자가 없거나 하나 이상의 경우를 말한다. ex) "ab*" 는 a, abc, ab, abbbb 등을 말한다. 
</P>
<P>'+' 는 바로 앞의 문자를 나타내면 꼭 1나 이상이어야 한다. ex) "ab+"는 abc, abbb 등이고 a는 되지 않는다. </P>
<P>'?' 는 바로 앞의 한 문자가 있거나 없는 것을 말한다. 단지 한 문자만이어야 한다. ex) "ab?"는 a 또는 ab 를 나타낸다. 
</P>
<P>[]], {} 와 () 그리고 | </P>
<P>'[]]' 는 []] 안에 존재하는 문자들 중 한 문자만을 나타낸다. ex) [abc]] 는 a 또는 b 또는 c 중에 한문자를 나타낸다. 
여기서 '-'를 사용할땐 범위를 나타낸다. 즉 [ a-f ]] 는 [abcdf]] 와 같은것을 나타낸다. </P>
<P>'{}'는 {} 앞에 있는 문자나 문자열의 개수를 정하는 것이다. ex) "ab{2}" 는 "abb"를 나타낸다. 즉 b의 개수가 2개를 
나타낸다. "ab{2,}" 는 abb, abbbbb 등 b의 개수가 2개 이상을 나타낸다. "ab{3,5}" 는 abbb, abbbb, 
abbbbb 와 같이 b가 3개에서 5개 까지를 나타낸다. </P>
<P>'()' 는 ()안에 있는 글자들을 그룹화한다. ex) a(bc)* 는 a, abc abcbc 등 'bc'가 없거나 하나 이상인 경우이다. 
"a(bc){2}" 는 abcbc 를 나타낸다. </P>
<P>'|' 는 OR 연산자 기능을 한다. "kim|lee" 는 kim 또는 lee 둘중 하나를 나타낸다. </P>
<P>지금까지 정규표현식의 기본적인 기호에 대하여 정리해 보았다. 그럼 다음 시간에는 좀더 복잡한 기호식에 대하여 알아보겠다. </P><PRE> &lt;리눅스 스타트&gt;
 when 2000-03-21

</PRE>
<H4 id=header5>정규표현식에 대해 알아 보자(2)</H4>
<P>이번에는 좀 더 복잡한 정규 표현식의 예를 다루어 보자 </P>
<P>문자 클래스 </P>
<P>[[:alpha:]]] 는 [a-zA-Z]] 와 동일 [[:digit:]]] 는 [0-9]] 와 동일 [[:alnum:]]] 는 
[a-zA-Z0-9]] 와 동일 [[:space:]]] 는 공백 문자 의미 </P>
<P>많은 예제를 이해함으로 좀더 깊이 있게 정규 표현식을 나열해 보자 </P>
<P>^[1-9]][0-9]]*$ : 1000 또는 200처럼 처음 숫자가 0이 아니고 끝까지 숫자만 존재 즉 돈 등의 값을 유효한지 검사 
한다. </P>
<P>^(0|[1-9]][0-9]]*)$ : 0 또는 1000, 200처럼 돈의 단위가 될 수 있다. </P>
<P>^(0|-?[1-9]][0-9]]*)$ : 이 표현은 음수 값도 표현되어진다. </P>
<P>^[0-9]]+(.[0-9]]+)?$ : 즉 소수점 표현을 위해 나타내었다. '.' 는 임의의 한 문자가 아닌 소수점 마크 '.'을 
나타내기 위해 사용 되었다. 즉 20 또는 21.2 같은 소수점 한자리까지만 나타낸다. </P>
<P>^[0-9]]+(.[0-9]]{2})?$ : 이것은 소수점 두번째까지 나타낸다는 것이다. ex) 0.12 </P>
<P>^[0-9]]+(.[0-9]]{1,2})?$ : 이것은 소수점 하나 또는 두 개까지인 것이다. </P>
<P>^[0-9]]{1,3}(,[0-9]]{3})*(.[0-9]]{1,2})?$ : 이것은 3자리식 짤라서 콤마를 붙여 주면서 소수점 한자리에서 
두자리까지 표현한다. ex) 12,234,566.12 </P>
<P>위와 같이 예를 들어 간단히 설명해 보았다. 위의 부분을 자세히 분석해보구 이해가 확실히 되면 어느 정도 자신이 생길 것이다. </P>
<P>그럼 다음은 마지막으로 자주 웹프로그램에서 사용하는 메일 및 웹 등의 유효성을 검사하여 링크를 걸어주는 것에 대하여 이야기해보겠다. 
</P><PRE> &lt;리눅스 스타트&gt;
 when 2000-03-21

</PRE>
<H4 id=header6>정규표현식에 대해 알아 보자(3)</H4>
<P>이번에는 정규 표현식을 사용 하여 메일 및 웹 링크등의 유효성 검사 및 링크 걸어주기 등에 대하여 알아 보자. </P>
<P>이메일 유효성 검사 </P>
<P>이메일에 대하여 알아보면 이메일 주소는 유저명과 서버명을 '@'를 사용하여 나타낸다. 예를 들면 start@linuxstart.co.kr과 
같이 나타낸다. </P>
<P>유저명의 조건 : 대문자, 소문자, 숫자 그리고 '.' '-' '_' 을 가질 수 있다. 유저명은 '.' 로 시작 또는 끝나서는 안된다. 
</P>
<P>[_0-9a-zA-Z-]]+(.[_0-9a-zA-Z]]+)* </P>
<P>위와 같이 유저명의 유효성을 검사 할 수 있다. </P>
<P>서버명의 경우 : 위의 유저명의 경우와 동일하다. 단 '_' 을 사용해서는 안된다. </P>
<P>[0-9a-zA-Z-]]+(.[0-9a-zA-Z-]]+)* </P>
<P>와 같이 나타낼 수 있다. </P>
<P>전체의 전자우편 유효성 검사는 유저명@서버명이므로 아래와 같다. </P>
<P>^[_0-9a-zA-Z]]+(.[_0-9a-zA-Z+)*@[[0-9a-zA-Z]]+(.[0-9a-zA-Z]]+)*$ </P>
<P>와 같이 표현할 수 있다. </P>
<P>주소 유효성 검사 </P>
<P>HTTP의 주소등 자동 링크 걸어주기 위해선 먼저 URL의 유효성을 검사하여야 한다. </P>
<P>URL은 대문자, 소문자, 숫자 ,'.','_','=','&amp;','?','~','@','/','+'를 사용할 수 있다 </P>
<P>즉 <A href="http://"><U><FONT 
color=#111188>http://</FONT></U></A>([0-9a-zA-Z./@~?&amp;=_]]+)가 된다. </P>
<P>링크를 PHP를 사용하여 HTML로 걸어 주기 위한 방법 </P>
<P>$add="www.linuxstart.co.kr"; $pattern = "([0-9a-zA-Z./@~?&amp;=_]]+)"; $link 
= ereg_replace($pattern, "<A href="http://\1"><U><FONT 
color=#111188>http://\1</FONT></U></A>" $add); echo ("$link"); </P>
<P>의 결과 $link는 다음처럼 변경된다. <A href="http://www.linuxstart.co.kr"><U><FONT 
color=#111188>http://www.linuxstart.co.kr</FONT></U></A> 와 같이 된다. 참고로 \1은 첫번째 
괄호안의 값을 말한다. \2는 2번째 등등 </P>
<P>그럼 메일 링크의 경우를 보자 </P>
<P>$mail = "start@linuxstart.co.kr"; $pattern = 
"([_0-9a-zA-Z]]+(.[_0-9a-zA-Z]]+)*)@([0-9a-zA-Z]]+(.[0-9a-zA-Z]]+)*)" $link = 
ereg_replace($pattern, "\1@\3",$mail); echo ("$link"); </P>
<P>의 결과 $link는 다음과 같다. start@linuxstart.co.kr 와 같이 된다. </P>
<P>그럼 지금까지 정규 표현식에 대하여 이것으로 마친다... </P><PRE> &lt;리눅스 스타트&gt;
 when 2000-03-21


</PRE>
<H2 id=header7>알려진 기술</H2>
<H3 id=header8>정규 표현식 완전 해부와 실습</H3>
<P><A class=namedurl 
href="http://www.hanbitbook.co.kr/look.htm?book_code=030303-00001"><U><FONT 
color=#111188>정규 표현식 완전 해부와 실습</FONT></U></A>에서 발췌한 부분입니다. </P>
<H4 id=header9>HTML 테그에 매체하기</H4><PRE>&lt;("[^"]*"|'[^']*'|[^'"&gt;])*&gt;

&lt;				# 시작하는 "&lt;"
	(			#임의의 개수의...
		"[^"]*"		#큰따옴표로 감싼 문자열
		|
		'[^']*'		#작은따옴표로 감싼 문자열
		|
		[^'"&gt;]		#"그 외의 문자"
	)*
&gt;				#끝내는 "&gt;"
</PRE>
<H4 id=header10>HTML 링크 만들기</H4><PRE>&lt;ab([^&gt;]+)&gt;(.*?)&lt;/a&gt;
</PRE>
<H4 id=header11>HTML 링크의 세부사항 검사</H4><PRE>bHREFs*=s*(?:"([^"]*)"|'([^']*)'|([^'"&gt;s]+))

b HREF 		#"href" 속성
s* = s*		#"="의 앞, 뒤에는 공백이 들어갈 수 있다
(?:			#실제 값은 다음 중 하나이다
	"([^"]*)"	#큰따옴표로 감싼 문자열
	|
	'([^']*)'	#작은따옴표로 감싼 문자열
	|
	([^'"&gt;s]+)	#기타문자
)
</PRE>
<H4 id=header12>HTTP URL 검사</H4><PRE>^http://([^/:]+(:(d+))?)(/.*)?$
</PRE>
<P>$1 에 host $3 에 포트 $4 에 경로 &gt;&gt;&gt; </P>
<H4 id=header13>HOST 이름 확인</H4><PRE>^([a-z0-9].|[a-z0-0][-a-z0-9]{0,61}[a-z0-9].)*(com|edu|gov|int|mil|net|org|biz|info|name|museum|coop|aero|[a-z][a-z])$

^
([a-z0-9].|[a-z0-0][-a-z0-9]{0,61}[a-z0-9].)*				#하나 이상의 점으로 구분된 부분
(com|edu|gov|int|mil|net|org|biz|info|name|museum|coop|aero|[a-z][a-z])	#맨 뒤 부분
$
</PRE>
<H4 id=header14>텍스트에서 URL을 추출하는 방법</H4><PRE>b((ftp|http?)://[-w]+(.w[-w]*)+|([a-z0-9]([-a-z0-9]*[a-z0-9])?.)+(comb|edub|bizb|govb|in(t|fo)b|milb|netb|orgb|[a-z][a-z]b))(:d+)?(/[^!.,?:"'&lt;&gt;()[]{}sx7F-xFF]*([!.,?]+[^!.,?;"'&lt;&gt;()[]{}sx7F-xFF]+)*)?



b
#앞 부분을 매치 시킨다(proto://hostname, 또는 그냥 hostname)
(
	(ftp|http?)://[-w]+(.w[-w]*)+
	|
	#또는 호스트이름을 매치시키기 위한 별도의 하위 표현식을 사용할 수 있다
	([a-z0-9]([-a-z0-9]*[a-z0-9])?.)+ #서브 도메인
	#.com과 같은 부분을 매치시킨다.
	(	 comb
		|edub
		|bizb
		|govb
		|in(t|fo)b
		|milb
		|netb
		|orgb
		|[a-z][a-z]b
	)
)
#포트 번호를 처리하기 위한 부분
(:d+)?
#/로 시작하는 URL의 경로 부분
(
	/
	#다음 부분은 여러 경험을 바탕으로 만든 정규 표현식
	[^!.,?:"'&lt;&gt;()[]{}sx7F-xFF]*
	(
		[!.,?]+[^!.,?;"'&lt;&gt;()[]{}sx7F-xFF]+
	)*
)?
</PRE></DIV>
</BODY></HTML>
