def parseXMI(pymeraseConfig, model, classesInModel):
  """Convert external UML model to pymerase's model classes.
  """
  if isinstance(model, UML13.Model):
    umlClass = UML13.Class
    umlParser = uml13Parser(pymeraseConfig)
  elif isinstance(model, UML14.Model):
    umlClass = UML14.Class
    umlParser = uml14Parser(pymeraseConfig)
  else:
    raise ValueError("Pymerase only supports UML 1.3 and 1.4 metamodel")

  classes = filter(lambda c: isinstance(c, umlClass), model.ownedElement)
  
  for xx in model.ownedElement:
  	
  #print 'model.ownedElement',model.ownedElement

  for xmiClass in classes:
    parsedClass = umlParser.parseXMIClass(classesInModel, xmiClass)
    if parsedClass is not None:
      classesInModel[parsedClass.getUUID()] = parsedClass

  addForeignKeys(pymeraseConfig, classesInModel)

  return classesInModel.values()
